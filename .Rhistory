for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
}
states_all <- rbind(states_all, states)
}
df <- data.frame("v" = vs, "state1" = 0, "state2" = 0)
for (i in 1:length(vs)){
table_iter <- as.data.frame(table(states_all[,i]))
#print(table_iter)
for (j in 1:length(table_iter$Var1)){
state_iter <- paste("state", table_iter$Var1[j], sep = "")
freq_iter <- table_iter$Freq[j]
df[state_iter][i,] <- freq_iter/n_sim
}
}
i
states
length(vs)
plot(simul_DDM_non_stop(v = 0, init_loc = init_loc, n_iter = 2000)$loc)
simul_DDM_non_stop(v = 0, init_loc = init_loc, n_iter = 2000)
vs <- seq(-2,3,0.5)
states_all <-c()
for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
}
states_all <- rbind(states_all, states)
}
df <- data.frame("v" = vs, "state1" = 0, "state2" = 0)
View(df)
View(states_all)
for (i in 1:length(vs)){
table_iter <- as.data.frame(table(states_all[,i]))
#print(table_iter)
for (j in 1:length(table_iter$Var1)){
state_iter <- paste("state", table_iter$Var1[j], sep = "")
freq_iter <- table_iter$Freq[j]
df[state_iter][i,] <- freq_iter/n_sim
}
}
df1 <- gather(df, key = "state", value = "p", state1, state2)
ggplot(data=df1, aes(x=v, y=p, group=state,colour=state)) +
xlab("Stimulus Strength (C)") +
ylab("Proportion") +
geom_line() +
geom_point() +
scale_colour_discrete(name  ="System State",
#breaks=c("Female", "Male"),
labels=c("State 1", "State 2"))
vs <- seq(-2,3,0.3)
states_all <-c()
for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
}
states_all <- rbind(states_all, states)
}
df <- data.frame("v" = vs, "state1" = 0, "state2" = 0)
for (i in 1:length(vs)){
table_iter <- as.data.frame(table(states_all[,i]))
#print(table_iter)
for (j in 1:length(table_iter$Var1)){
state_iter <- paste("state", table_iter$Var1[j], sep = "")
freq_iter <- table_iter$Freq[j]
df[state_iter][i,] <- freq_iter/n_sim
}
}
n_sim <- 100
vs <- seq(-2,3,0.3)
states_all <-c()
for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
}
states_all <- rbind(states_all, states)
}
df <- data.frame("v" = vs, "state1" = 0, "state2" = 0)
for (i in 1:length(vs)){
table_iter <- as.data.frame(table(states_all[,i]))
#print(table_iter)
for (j in 1:length(table_iter$Var1)){
state_iter <- paste("state", table_iter$Var1[j], sep = "")
freq_iter <- table_iter$Freq[j]
df[state_iter][i,] <- freq_iter/n_sim
}
}
df1 <- gather(df, key = "state", value = "p", state1, state2)
ggplot(data=df1, aes(x=v, y=p, group=state,colour=state)) +
xlab("Drift Rate (v)") +
ylab("Proportion") +
geom_line() +
geom_point() +
scale_colour_discrete(name  ="System State",
#breaks=c("Female", "Male"),
labels=c("State 1", "State 2"))
simul_DDM_non_stop <- function(v, dt = 0.001, a = 0.8, init_loc = 0.4, n_iter = 2000, c = sqrt(0.1)){
iter <- 1
location <- init_loc
y <- init_loc
while(iter<=n_iter){
dW <- rnorm(1)*sqrt(dt)
dy <- v*dt + c*dW
y <- y + dy
location <- c(location, y)
iter <- iter + 1
}
state <- get_state_DDM(y,a)
return(list(loc = y, state = state))
}
n_sim <- 100
vs <- seq(-2,3,0.3)
states_all <-c()
for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
}
states_all <- rbind(states_all, states)
}
get_state_DDM <- function(y,a){
if(y > a){
state <- 1
}else if(y < 0){
state <- 2
}
}
vs <- seq(-2,3,0.3)
states_all <-c()
for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
}
states_all <- rbind(states_all, states)
}
df <- data.frame("v" = vs, "state1" = 0, "state2" = 0)
for (i in 1:length(vs)){
table_iter <- as.data.frame(table(states_all[,i]))
#print(table_iter)
for (j in 1:length(table_iter$Var1)){
state_iter <- paste("state", table_iter$Var1[j], sep = "")
freq_iter <- table_iter$Freq[j]
df[state_iter][i,] <- freq_iter/n_sim
}
}
View(table_iter)
states
states_all
View(states_all)
df <- data.frame("v" = vs, "state1" = 0, "state2" = 0)
for (i in 1:length(vs)){
table_iter <- as.data.frame(table(states_all[,i]))
#print(table_iter)
for (j in 1:length(table_iter$Var1)){
state_iter <- paste("state", table_iter$Var1[j], sep = "")
freq_iter <- table_iter$Freq[j]
df[state_iter][i,] <- freq_iter/n_sim
}
}
i
for (i in 1:n_sim){
#print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
print(v)
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
}
states_all <- rbind(states_all, states)
}
for (i in 1:1){
#print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
print(v)
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
}
states_all <- rbind(states_all, states)
}
states_all
states_all <-c()
for (i in 1:1){
#print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
print(v)
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
}
states_all <- rbind(states_all, states)
}
length(vs)
states_all <-c()
for (i in 1:1){
#print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
print(state)
}
states_all <- rbind(states_all, states)
}
states_all <-c()
for (i in 1:1){
#print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
print(state)
}
states_all <- rbind(states_all, states)
}
vs <- seq(-2,3,0.3)
states_all <-c()
for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
#print(state)
}
states_all <- rbind(states_all, states)
}
df <- data.frame("v" = vs, "state1" = 0, "state2" = 0)
for (i in 1:length(vs)){
table_iter <- as.data.frame(table(states_all[,i]))
#print(table_iter)
for (j in 1:length(table_iter$Var1)){
state_iter <- paste("state", table_iter$Var1[j], sep = "")
freq_iter <- table_iter$Freq[j]
df[state_iter][i,] <- freq_iter/n_sim
}
}
df1 <- gather(df, key = "state", value = "p", state1, state2)
ggplot(data=df1, aes(x=v, y=p, group=state,colour=state)) +
xlab("Drift Rate (v)") +
ylab("Proportion") +
geom_line() +
geom_point() +
scale_colour_discrete(name  ="System State",
#breaks=c("Female", "Male"),
labels=c("State 1", "State 2"))
get_state_DDM <- function(y,a){
if(y > a){
state <- 1
}else if(y < 0){
state <- 2
}else{
state <- 0
}
}
n_sim <- 100
vs <- seq(-2,3,0.3)
states_all <-c()
for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
#print(state)
}
states_all <- rbind(states_all, states)
}
df <- data.frame("v" = vs, "state1" = 0, "state2" = 0)
for (i in 1:length(vs)){
table_iter <- as.data.frame(table(states_all[,i]))
#print(table_iter)
for (j in 1:length(table_iter$Var1)){
state_iter <- paste("state", table_iter$Var1[j], sep = "")
freq_iter <- table_iter$Freq[j]
df[state_iter][i,] <- freq_iter/n_sim
}
}
df <- data.frame("v" = vs, "state0" = 0,"state1" = 0, "state2" = 0)
for (i in 1:length(vs)){
table_iter <- as.data.frame(table(states_all[,i]))
#print(table_iter)
for (j in 1:length(table_iter$Var1)){
state_iter <- paste("state", table_iter$Var1[j], sep = "")
freq_iter <- table_iter$Freq[j]
df[state_iter][i,] <- freq_iter/n_sim
}
}
df1 <- gather(df, key = "state", value = "p", state0, state1, state2)
ggplot(data=df1, aes(x=v, y=p, group=state,colour=state)) +
xlab("Drift Rate (v)") +
ylab("Proportion") +
geom_line() +
geom_point() +
scale_colour_discrete(name  ="System State",
#breaks=c("Female", "Male"),
labels=c("State 1", "State 2"))
ggplot(data=df1, aes(x=v, y=p, group=state,colour=state)) +
xlab("Drift Rate (v)") +
ylab("Proportion") +
geom_line() +
geom_point() +
scale_colour_discrete(name  ="System State",
#breaks=c("Female", "Male"),
labels=c("state 0", "State 1", "State 2"))
##### backward
vs <- seq(2,-3,-0.3)
states_all <-c()
for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = v, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
#print(state)
}
states_all <- rbind(states_all, states)
}
df <- data.frame("v" = vs, "state0" = 0,"state1" = 0, "state2" = 0)
for (i in 1:length(vs)){
table_iter <- as.data.frame(table(states_all[,i]))
#print(table_iter)
for (j in 1:length(table_iter$Var1)){
state_iter <- paste("state", table_iter$Var1[j], sep = "")
freq_iter <- table_iter$Freq[j]
df[state_iter][i,] <- freq_iter/n_sim
}
}
df1 <- gather(df, key = "state", value = "p", state0, state1, state2)
ggplot(data=df1, aes(x=v, y=p, group=state,colour=state)) +
xlab("Drift Rate (v)") +
ylab("Proportion") +
geom_line() +
geom_point() +
scale_colour_discrete(name  ="System State",
#breaks=c("Female", "Male"),
labels=c("state 0", "State 1", "State 2"))
simul_IDM_one_trial <- function(C = 0.2, N = 2000, W_pos = 52500, W_neg = 8400, Bns = 2500, Bs = 1000, # mode = "coarse-grained"
beta = 1/24, theta = 51450, Ter = 0.3, h = 0.4, D = 0.05, sigma = 0.01, dt = 0.001,
init_loc = c(0.3,0.3), mode = "Euler-Maruyama"){ # D = 0.05, 2/(1000*exp(1))
B1 <- Bs*(1+C) + Bns
B2 <- Bs*(1-C) + Bns
#start_time <- Sys.time()
y1 <- init_loc[1] #sample_y[1]
y2 <- init_loc[2] #sample_y[2]
iter <- 1
location <- c(y1, y2)
if(mode == "Euler-Maruyama"){
while(continue(y1=y1, y2=y2, h=h)){
dW1 <- rnorm(1)*sqrt(dt)
dW2 <- rnorm(1)*sqrt(dt)
dy1 <- -beta*D*dFdy1(y1,y2, W_pos, W_neg, B1, theta, beta, N)*dt + sqrt(2*D)*dW1#(wiener_post1 - wiener_pre1)
dy2 <- -beta*D*dFdy2(y1,y2, W_pos, W_neg, B2, theta, beta, N)*dt + sqrt(2*D)*dW2#(wiener_post2 - wiener_pre2)
y1 <- clamp(y1 + dy1) # clamp to [0,1]
y2 <- clamp(y2 + dy2)
location <- cbind(location, c(y1,y2))
iter <- iter + 1
}
}else if(mode == "coarse-grained"){
while(continue(y1=y1, y2=y2, h=h)){
y_step <- mvrnorm(n = 1, mu=c(0,0), Sigma=matrix(c(sigma^2,0,0,sigma^2), 2,2))
y_candidate1 <- clamp(y1+y_step[1])
y_candidate2 <- clamp(y2+y_step[2])
#print(y_step)
df <- free_energy(y_candidate1,y_candidate2,B1=B1,B2=B2) - free_energy(y1,y2,B1=B1,B2=B2)
# Matropolis acceptance rule
if (df<=0){ # accept the move
y1 <- y_candidate1 # clamp to [0,1]
y2 <- y_candidate2
}else{ # accept the move with a probability
p_accept <- exp(-beta*df)
if (p_accept >= runif(1)){
y1 <- y_candidate1 # clamp to [0,1]
y2 <- y_candidate2
location <- cbind(location, c(y1,y2))
}
}
iter <- iter + 1
}
}else{
print("Wrong mode!")
}
RT <- clamp(iter*dt + Ter, 0, 3)
R <- get_res(y1 = y1, y2 = y2, h = h, B1 = B1, B2 = B2)
#print(i)
#print(iter)
if ((i%%1000) == 0){
cat("simulation ",i," has finished. ")
cat(iter, "iterations.")
}
#print(Sys.time() - start_time)
cat("Averaged teration is ", mean(iters), ". ")
return(list("Trajectory" = location, "RT" = RT, "R" = R))
}
simul_DDM <- function(v, dt = 0.001, a = 0.8, init_loc = 0.4, c = sqrt(0.1)){
iter <- 1
location <- init_loc
y <- init_loc
while(get_state_DDM(y,a)==0){
dW <- rnorm(1)*sqrt(dt)
dy <- v*dt + c*dW
y <- y + dy
location <- c(location, y)
iter <- iter + 1
}
state <- get_state_DDM(y,a)
return(list(loc = y, state = state))
}
simul_DDM(v=1)
simul_DDM(v=1)
states_all <-c()
for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = 0.5, init_loc = init_loc, n_iter = 2000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
#print(state)
}
states_all <- rbind(states_all, states)
}
View(states_all)
states_all <-c()
for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM_non_stop(v = 0.3, init_loc = init_loc, n_iter = 1000)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
#print(state)
}
states_all <- rbind(states_all, states)
}
states_all <-c()
for (i in 1:n_sim){
print(i)
init_loc <- 0.4
states <- c()
for(v in vs){
result_iter <- simul_DDM(v = 0.3, init_loc = init_loc)
init_loc <- result_iter$loc
state <- result_iter$state
states <- c(states, state)
#print(state)
}
states_all <- rbind(states_all, states)
}
